#include <algorithm>
#include <iostream>
using namespace std;
//implementation
int main()
{
    int arr[] = {1, 5, 4, 2, 42, 51, 27, 7};
    int n;
    cin >> n;
    bool x = false;
    sort(arr, arr + 8);
    int start = 0;
    int end = 7;
    while (start <= end)
    {
        int mid = start + (end - start) / 2;
        if (n == arr[mid])
        {
            cout << mid << endl;
            x = true;
            break;
        }
        else if (n < arr[mid])
            end = mid - 1;
        else if (n > arr[mid])
            start = mid + 1;
    }
    if (!x)
        cout << -1 << endl;
} 
//stl for binary search
if array, arr = {1,4,5,6,9,9}
bool res = binary_search(arr,arr+n,3)//gives false ;
bool res = binary_search(arr,arr+n,4)//gives true ;
//lower bound always returns that particular value or the next one if it does not exist and to the end of index if it cant be found in the array
int val = lower_bound(arr,arr+n,4)-a ->returns 1,2-1=1
int val = lower_bound(arr,arr+n,7)-a ->4
int val = lower_bound(arr,arr+n,10)-a->6

//upper bound returns the immediate greater value than the provided value. 
int val = upper_bound(arr,arr+n,4)-a ->returns 2//3-1=2
int val = upper_bound(arr,arr+n,7)-a ->5
int val = upper_bound(arr,arr+n,10)-a->6